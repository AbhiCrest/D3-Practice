// Generated by CoffeeScript 2.3.1
(function() {
  // https://bl.ocks.org/gordlea/27370d1eea8464b04538e6d8ced39e89
  var lineChart;

  window.lineChart = lineChart = class lineChart {
    constructor() {
      var that;
      this.margin = {
        top: 50,
        right: 50,
        bottom: 50,
        left: 50
      };
      this.jsondata = this.getJSONdata();
      //@height = window.innerHeight - @margin.top - @margin.bottom #window's inner height
      this.height = 500 - this.margin.top - this.margin.bottom;
      this.parseDate = d3.timeParse("%Y");
      // Add Tool tip Div to chart
      this.toolTipDiv = d3.select('.drawBoard').append('div').attr('class', 'toolTip').style('opacity', 0);
      
      //1. attach SVG to body
      this.svg = d3.select(".drawBoard").append("svg").attr("class", "lineChart").attr("height", this.height + this.margin.top + this.margin.bottom);
      this.gContainer = this.svg.append("g").attr("class", "gContainer").attr("transform", "translate( " + this.margin.left + " , " + this.margin.top + ")");
      
      //2. X Scale
      this.xAxis = d3.axisBottom();
      this.drawXaxis = this.gContainer.append("g").attr("class", "xAxis").attr("transform", "translate( 0, " + this.height + ")");
      that = this;
      this.xScale = d3.scaleTime().domain(d3.extent(this.jsondata, function(d) {
        return d.year = that.parseDate(d.year); //input			
      }));
      
      //3. Y Scale 
      this.yAxis = d3.axisLeft();
      this.drawYaxis = this.gContainer.append("g").attr("class", "yAxis");
      this.yScale = d3.scaleLinear().domain([
        0,
        d3.max(this.jsondata,
        function(d) {
          return d.count;
        }) + 1000 //input
      ]).range([
        this.height,
        0 //output	
      ]);
      this.yAxis.scale(this.yScale);
      this.drawYaxis.call(this.yAxis);
      
      //7. To add horizontal lines on graph
      this.gContainer.append("g").attr("class", "grid");
    }

    init() {
      this.setSvgDimensions();
      return $(window).on({
        'resize': () => {
          return this.setSvgDimensions();
        }
      });
    }

    setSvgDimensions() {
      this.width = window.innerWidth - this.margin.left - this.margin.right; //window's inner width
      this.svg.attr("width", this.width + this.margin.left + this.margin.right);
      this.xScale.range([0, this.width]);
      this.xAxis.scale(this.xScale);
      this.drawXaxis.call(this.xAxis);
      this.connectPoints();
      this.plotPoints();
      return this.drawHorizontalGridLines(this.width);
    }

    connectPoints() {
      var that;
      that = this;
      //4.d3's line generator
      this.line = d3.line().x(function(d) {
        return that.xScale(d.year); //set the x co-ordinates values for the line generator
      }).y(function(d) {
        return that.yScale(d.count); //set the y co-ordinates values for the line generator 
      }).curve(d3.curveMonotoneX); // apply smoothing to the line
      
      //5. Append Path , bind the data and call the line generator
      this.gContainer.selectAll('.line').remove();
      return this.gContainer.append("path").datum(this.jsondata).attr("class", "line").attr("d", this.line); //Bind Data to line //calls the line generator
    }

    plotPoints() {
      var that;
      //6. Append a circle for each datapoint
      this.gContainer.selectAll('.dot').remove();
      that = this;
      return this.gContainer.selectAll(".dot").data(this.jsondata).enter().append("circle").attr("class", "dot").attr("cx", function(d) {
        return that.xScale(d.year);
      }).attr("cy", function(d) {
        return that.yScale(d.count);
      }).attr("r", 5).style("fill", "#7a7a7a").attr("stroke", "#fff").on("mouseover", function(d) {
        var boxHeight, boxWidth, leftPosition, topPosition;
        d3.select(this).attr("r", 8).style("fill", function(d) {
          return "#fff";
        }).attr("stroke", '#36648b').attr("stroke-width", 5);
        leftPosition = $(this).attr("cx");
        topPosition = $(this).attr("cy");
        boxWidth = $(".drawBoard").width();
        boxHeight = $(".drawBoard").height();
        //when tooltip lies on right edge , pull it in
        if ((boxWidth - leftPosition) < 100) {
          leftPosition = leftPosition - (boxWidth - leftPosition);
        }
        
        //when point is on x=0 ; i.e. y-axis	
        if (parseInt(leftPosition) === 0) {
          leftPosition = 25;
        }
        //when point is at top of chart
        if (parseInt(topPosition) < 25) {
          topPosition = 60;
        }
        that.toolTipDiv.transition().duration(200).style('opacity', 0.9);
        return that.toolTipDiv.html("Year : " + d.year.getFullYear() + "<br>" + "Count : " + d.count).style("left", leftPosition + "px").style("top", topPosition + "px");
      }).on("mouseout", function(d) {
        d3.select(this).attr("r", 5).style("fill", "#7a7a7a").attr("stroke", '#fff').attr("stroke-width", 1);
        return that.toolTipDiv.transition().duration(500).style('opacity', 0);
      });
    }

    drawHorizontalGridLines(width) {
      //add horizontal lines to graph parallel to x-axis
      return this.gContainer.select(".grid").call(d3.axisLeft(this.yScale).ticks(10).tickSize(-width).tickFormat(''));
    }

    getJSONdata() {
      var dataArray;
      dataArray = [];
      $.ajax({
        type: "GET",
        async: false,
        url: "./lineChart.json",
        data: {
          get_param: 'value'
        },
        dataType: "json",
        success: function(data) {
          return dataArray = data;
        }
      });
      return dataArray;
    }

  };

  $(document).ready(function() {
    var chart;
    chart = new lineChart();
    return chart.init();
  });

}).call(this);
