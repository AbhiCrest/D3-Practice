// Generated by CoffeeScript 2.3.1
(function() {
  var multiLineChart;

  window.multiLineChart = multiLineChart = class multiLineChart {
    constructor() {
      var that;
      this.data = this.getJSONdata();
      this.lineColor = [" #152642", " #484848", "#f76c5e", " #ca2e55", "#84b4c0", "#7a4948", "#cebfcd", "#2c3749"];
      this.dataGroup = d3.nest().key(function(d) {
        return d.Org;
      }).entries(this.data);
      /*@dataGroup = [
          {
              "key":"IBM",
              "values":[
                         {"price": "202","year": "2000"}, {"price": "215","year": "2001"}, 
                         {"price": "179","year": "2002"}, {"price": "315","year": "2003"}, 
                         {"price": "134","year": "2003"}, {"price": "289","year": "2010"}
                      ] 
          },
          {
              "key":"AMAZON",
              "values":[
                          {"price": "204","year": "2000"}, {"price": "225","year": "2001"},
                          {"price": "279","year": "2002"}, {"price": "299","year": "2003"}, 
                          {"price": "234","year": "2003"}, {"price": "276","year": "2010"}
                      ] 
          }
      ]*/
      this.margin = {
        top: 50,
        bottom: 50,
        left: 50,
        right: 25
      };
      this.height = 500 - this.margin.top - this.margin.bottom;
      this.parseDate = d3.timeParse("%Y");
      //add tool tip div to the chart
      this.toolTipDiv = d3.select(".drawBoard").append("div").attr("class", "toolTip").style("display", "none");
      //add svg
      this.svg = d3.select(".drawBoard").append("svg").attr("class", "multiLineChart").attr("height", this.height + this.margin.top + this.margin.bottom);
      this.gContainer = this.svg.append("g").attr("class", "gContainer").attr("transform", "translate( " + 35 + " , " + this.margin.top + ")");
      
      //x-scale 
      that = this;
      this.xScale = d3.scaleTime().domain(d3.extent(this.data, function(d) {
        return d.year = that.parseDate(d.year);
      }));
      this.drawXaxis = this.gContainer.append('g').attr("class", "xAxis").attr("transform", "translate( 0, " + this.height + ")");
      this.xAxis = d3.axisBottom().scale(this.xScale);
      this.drawXaxis.call(this.xAxis);
      
      //y-scale
      this.yScale = d3.scaleLinear().domain([
        0,
        d3.max(this.data,
        function(d) {
          return d.price;
        })
      ]).range([this.height, 0]);
      this.drawYaxis = this.gContainer.append('g').attr("class", "yAxis");
      this.yAxis = d3.axisLeft().scale(this.yScale);
      this.drawYaxis.call(this.yAxis);
      
      // To add horizontal lines on graph
      this.gContainer.append("g").attr("class", "grid");
    }

    init() {
      this.setSvgDimensions();
      return $(window).on({
        'resize': () => {
          this.gContainer.selectAll(".line").remove();
          this.gContainer.selectAll(".dot").remove();
          d3.select(".drawBoard").selectAll(".label").remove();
          return this.setSvgDimensions();
        }
      });
    }

    setSvgDimensions() {
      this.width = this.width = window.innerWidth - this.margin.left - this.margin.right;
      this.svg.attr("width", this.width + this.margin.left + this.margin.right);
      this.xScale.range([0, this.width]);
      this.xAxis.scale(this.xScale);
      this.drawXaxis.call(this.xAxis);
      this.addLabels();
      this.generateLine();
      this.plotPoints();
      return this.drawHorizontalGridLines(this.width);
    }

    getJSONdata() {
      var dataArray;
      dataArray = [];
      $.ajax({
        type: "GET",
        async: false,
        url: "./MultiLineData.json",
        data: {
          get_param: 'value'
        },
        dataType: "json",
        success: function(data) {
          return dataArray = data;
        }
      });
      return dataArray;
    }

    generateLine() {
      var that;
      that = this;
      this.line = d3.line().x(function(d) {
        return that.xScale(d.year);
      }).y(function(d) {
        return that.yScale(d.price);
      }).curve(d3.curveCardinal);
      that = this;
      return this.dataGroup.forEach(function(data, index) {
        return that.gContainer.append("path").datum(data.values).attr("class", "line").attr("org", data.key).attr("d", that.line).attr("fill", "none").attr("stroke", that.lineColor[index]).attr("stroke-width", 2).attr("stroke-opacity", 0.4).on("mouseover", function(d) {
          that.onMouseover(this, index);
          return that.showLabel(data.key);
        }).on("mouseout", function(d) {
          that.onMouseout(this);
          return that.fadeLabel(data.key);
        });
      });
    }

    plotPoints() {
      var that;
      that = this;
      return this.dataGroup.forEach(function(data, index) {
        return that.gContainer.selectAll("dot").data(data.values).enter().append("circle").attr("class", "dot").attr("org", data.key).attr("cx", function(d) {
          return that.xScale(d.year);
        }).attr("cy", function(d) {
          return that.yScale(d.price);
        }).attr("r", 5).attr("fill", "#fff").attr("stroke", that.lineColor[index]).attr("stroke-opacity", 0.4).on("mouseover", function(d) {
          var boxHeight, boxWidth, diff, leftPosition, toolTipWidth, topPosition;
          that.onMouseover(this, index);
          leftPosition = parseInt($(this).attr("cx"));
          topPosition = parseInt($(this).attr("cy"));
          boxWidth = parseInt($(".drawBoard").width());
          boxHeight = parseInt($(".drawBoard").height());
          toolTipWidth = $(".toolTip");
          diff = (leftPosition + 125) - boxWidth;
          
          //when tooltip lies on right edge , pull it in
          if (diff > 10) {
            leftPosition = (leftPosition - diff) - 10;
          }
          
          //when point is on x=0 ; i.e. y-axis
          if (leftPosition === 0) {
            leftPosition = 35;
          }
          //when point is at top of chart
          if (topPosition < 25) {
            topPosition = 60;
          }
          that.toolTipDiv.transition().duration(200).style("display", "block");
          that.toolTipDiv.html("Year : " + d.year.getFullYear() + "<br>" + "Price : " + d.price).style("left", leftPosition + "px").style("top", topPosition + "px").style("background", that.lineColor[index]);
          return that.showLabel(data.key);
        }).on("mouseout", function(d) {
          that.onMouseout(this);
          that.toolTipDiv.transition().duration(500).style("display", "none");
          return that.fadeLabel(data.key);
        });
      });
    }

    onMouseover(element, index) {
      var type;
      type = d3.select(element).attr("org");
      return d3.selectAll("[org=" + type + "]").attr("stroke-opacity", 0.9).attr("fill-opacity", 1).attr("stroke-opacity", 0.9).filter("circle").attr("fill", this.lineColor[index]);
    }

    onMouseout(element) {
      var type;
      type = d3.select(element).attr("org");
      return d3.selectAll("[org=" + type + "]").attr("stroke-opacity", 0.4).attr("fill-opacity", 0.4).attr("stroke-opacity", 0.4).filter("circle").attr("fill", "#fff").attr("fill-opacity", 1);
    }

    drawHorizontalGridLines(width) {
      //add horizontal lines to graph parallel to x-axis
      return this.gContainer.select(".grid").call(d3.axisLeft(this.yScale).ticks(10).tickSize(-width).tickFormat(''));
    }

    addLabels() {
      var that;
      d3.select(".drawBoard").append("div").attr("class", "label");
      that = this;
      return this.dataGroup.forEach(function(data, index) {
        var labelClass;
        labelClass = "label_" + data.key;
        d3.select(".label").append("div").attr("class", labelClass);
        d3.select("." + labelClass).append("span").attr("class", data.key).style("background", that.lineColor[index]);
        return d3.select("." + labelClass).append("p").attr("class", data.key).text(data.key).style("color", that.lineColor[index]);
      });
    }

    showLabel(element) {
      return d3.selectAll("[class=" + element + "]").style("opacity", 1);
    }

    fadeLabel(element) {
      return d3.selectAll("[class=" + element + "]").style("opacity", 0.4);
    }

  };

  $(document).ready(function() {
    var multilineChart;
    multilineChart = new multiLineChart();
    return multilineChart.init();
  });

}).call(this);
